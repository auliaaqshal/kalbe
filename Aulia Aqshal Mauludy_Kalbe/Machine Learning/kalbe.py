# -*- coding: utf-8 -*-
"""Kalbe.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1VBZY06j_DpTjpP8Up8VU7oc-ScXRUDlp
"""

import pandas as pd
import numpy as np

import matplotlib.pyplot as plt
import seaborn as sns

from sklearn.cluster import KMeans
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, mean_absolute_error, silhouette_score
from sklearn.preprocessing import Normalizer

from statsmodels.tsa.arima.model import ARIMA
from statsmodels.graphics.tsaplots import plot_predict

df_transaction = pd.read_csv('/content/drive/MyDrive/Case Study - Transaction.csv', delimiter=';')
df_product = pd.read_csv('/content/drive/MyDrive/Case Study - Product.csv', delimiter=';')
df_store = pd.read_csv('/content/drive/MyDrive/Case Study - Store.csv', delimiter=';')
df_customer = pd.read_csv('/content/drive/MyDrive/Case Study - Customer.csv', delimiter=';')

df_transaction['Date'] = pd.to_datetime(df_transaction['Date'])

df_transaction.head()

df_store['Latitude'] = df_store['Latitude'].replace(',', '.', regex=True).astype('float')
df_store['Longitude'] = df_store['Longitude'].replace(',', '.', regex=True).astype('float')

df_store.head()

df_customer['Income'] = df_customer['Income'].replace(',', '.', regex=True).astype('float')

df_customer.head()

df_merge = pd.merge(df_transaction, df_customer, on=['CustomerID'])
df_merge = pd.merge(df_merge, df_product.drop(columns=['Price']), on='ProductID')
df_merge = pd.merge(df_merge, df_store, on='StoreID')

df_merge.info()

df_regresi = df_merge.groupby(['Date']).agg({
    'Qty': 'sum'
}).reset_index()

df_regresi.info()

df_train, df_test = train_test_split(df_regresi, train_size=300)
df_train = df_regresi[:330]
df_test = df_regresi[330:]

print(df_train.tail())
print(df_test.head())

"""### REGRESSION"""

# ARIMA Time Series

df_train = df_train.set_index('Date')
df_test = df_test.set_index('Date')

y = df_train['Qty']
model_arima = ARIMA(y, order=(40, 2,1)).fit()

y_pred = model_arima.get_forecast(len(df_test))
y_pred_df = y_pred.conf_int()
y_pred_df['predictions'] = model_arima.predict(start= y_pred_df.index[0], end= y_pred_df.index[-1])
y_pred_df.index = df_test.index

y_pred_out = y_pred_df['predictions'].round()

mae = mean_absolute_error(df_test['Qty'], y_pred_out)
rmse = mean_squared_error(df_test['Qty'], y_pred_out)
print(rmse)
print(mae)

plt.figure(figsize=(20, 5))
plt.plot(df_train['Qty'])
plt.plot(df_test['Qty'], color='red')
plt.plot(y_pred_out, color='black', label='Arima Predictions')
plt.legend()

store = [0]
y = df_test['Qty'].values.tolist()
x = y_pred_out.tolist()

for i in range(len(x)):
  order = 0
  store.append(0)
  store[i] = float(store[order] + x[i] - y[i])
  order+=1

store.pop()
data = {
    "Tambah Barang (prediksi)": x,
    "Penjualan (aktual)": y,
    "stok" : store
}

df = pd.DataFrame(data)
df.describe()

"""### CLUSTERING"""

df_cluster = df_merge.groupby("CustomerID").agg({
    'TransactionID' : "count",
    'Qty' : "sum",
    'TotalAmount' : "sum"
}).reset_index()

df_cluster.head()

# apply normalization techniques
scaler = Normalizer(norm='l2')

normalized_data = scaler.fit_transform(df_cluster[["TransactionID","Qty", "TotalAmount"]])

K = range(2,8)
fits = []
score = []

for k in K:
  model = KMeans(n_clusters = k, random_state = 0,n_init='auto').fit(normalized_data)
  fits.append(model)
  score.append(silhouette_score(normalized_data, model.labels_, metric='euclidean'))

print(score)

sns.lineplot(x = K, y=score)

df_cluster['cluster_label'] = fits[2].labels_

df_cluster_fix = df_cluster.groupby('cluster_label').agg({
    'CustomerID' : 'count',
    'TransactionID' : 'mean',
    'Qty' : 'mean',
    'TotalAmount' : 'mean'
})
df_cluster_fix

plt.figure(figsize=(11,6))
sns.set_style('white')
plt.scatter(x='Qty', y='TotalAmount', data=df_cluster,c=df_cluster['cluster_label'], cmap='winter')
plt.scatter(x= df_cluster_fix['Qty'], y=df_cluster_fix['TotalAmount'], s=300, c='red')
plt.xlabel('Jumlah Pembelian', fontsize=15)
plt.ylabel('Total Pembelian', fontsize=15)
plt.title('Segmentasi Pelanggan bedasarkan Jumlah Pembelian dan Total Pembeliannya', fontsize=18)
plt.show()